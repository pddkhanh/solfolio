// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ProtocolType {
  MARINADE
  KAMINO
  JITO
  ORCA
  RAYDIUM
  MARGINFI
  SOLEND
  DRIFT
  OTHER
}

enum PositionType {
  STAKING
  LENDING
  BORROWING
  LP_POSITION
  VAULT
  FARMING
  OTHER
}

enum CacheType {
  PRICE
  POSITION
  BALANCE
  APY
  METADATA
}

// Models
model Wallet {
  id             String     @id @default(uuid())
  address        String     @unique
  lastUpdated    DateTime   @updatedAt
  createdAt      DateTime   @default(now())
  positions      Position[]
  balances       Balance[]
  cacheEntries   Cache[]

  @@index([address])
}

model Position {
  id              String       @id @default(uuid())
  walletId        String
  wallet          Wallet       @relation(fields: [walletId], references: [id], onDelete: Cascade)
  protocol        ProtocolType
  positionType    PositionType
  tokenMint       String       // Token mint address (e.g., mSOL mint for Marinade)
  amount          Decimal      @db.Decimal(30, 10)
  underlyingMint  String?      // Underlying token mint (e.g., SOL for mSOL)
  underlyingAmount Decimal?    @db.Decimal(30, 10)
  usdValue        Decimal      @db.Decimal(20, 2)
  apy             Decimal?     @db.Decimal(10, 4)
  rewards         Decimal?     @db.Decimal(30, 10)
  metadata        Json?        // Additional protocol-specific data
  lastUpdated     DateTime     @updatedAt
  createdAt       DateTime     @default(now())

  @@index([walletId, protocol])
  @@index([tokenMint])
  @@index([walletId, lastUpdated(sort: Desc)])
  @@index([protocol, lastUpdated(sort: Desc)])
  @@index([usdValue(sort: Desc)])
  @@unique([walletId, protocol, tokenMint])
}

model Balance {
  id          String   @id @default(uuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  tokenMint   String
  amount      Decimal  @db.Decimal(30, 10)
  decimals    Int
  usdValue    Decimal? @db.Decimal(20, 2)
  symbol      String?
  name        String?
  logoUri     String?
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([walletId])
  @@index([tokenMint])
  @@index([walletId, lastUpdated(sort: Desc)])
  @@index([usdValue(sort: Desc)])
  @@unique([walletId, tokenMint])
}

model TokenPrice {
  id          String   @id @default(uuid())
  tokenMint   String   @unique
  symbol      String
  price       Decimal  @db.Decimal(20, 10)
  priceChange24h Decimal? @db.Decimal(10, 4)
  volume24h   Decimal? @db.Decimal(20, 2)
  marketCap   Decimal? @db.Decimal(20, 2)
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([tokenMint])
  @@index([symbol])
  @@index([lastUpdated(sort: Desc)])
  @@index([symbol, lastUpdated(sort: Desc)])
}

model ProtocolApy {
  id          String       @id @default(uuid())
  protocol    ProtocolType
  tokenMint   String
  apy         Decimal      @db.Decimal(10, 4)
  metadata    Json?        // Additional APY details (base APY, bonus APY, etc.)
  lastUpdated DateTime     @updatedAt
  createdAt   DateTime     @default(now())

  @@index([protocol, tokenMint])
  @@unique([protocol, tokenMint])
}

model Cache {
  id          String    @id @default(uuid())
  key         String    @unique
  type        CacheType
  value       Json
  walletId    String?
  wallet      Wallet?   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  lastUpdated DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  @@index([key, type])
  @@index([walletId])
  @@index([expiresAt])
  @@index([walletId, type])
  @@index([expiresAt, type])
}

model MarinadeData {
  id                String   @id @default(uuid())
  msolMint          String   @unique @default("mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So")
  exchangeRate      Decimal  @db.Decimal(20, 10) // mSOL to SOL exchange rate
  totalStaked       Decimal  @db.Decimal(30, 10) // Total SOL staked
  apy               Decimal  @db.Decimal(10, 4)
  epochInfo         Json?    // Current epoch information
  validatorCount    Int?
  lastUpdated       DateTime @updatedAt
  createdAt         DateTime @default(now())

  @@index([msolMint])
}

model Transaction {
  id              String   @id @default(uuid())
  signature       String   @unique
  walletAddress   String
  protocol        ProtocolType?
  type            String   // deposit, withdraw, swap, etc.
  amount          Decimal? @db.Decimal(30, 10)
  tokenMint       String?
  usdValue        Decimal? @db.Decimal(20, 2)
  metadata        Json?
  blockTime       DateTime
  processedAt     DateTime @default(now())

  @@index([walletAddress])
  @@index([signature])
  @@index([blockTime])
  @@index([walletAddress, blockTime(sort: Desc)])
  @@index([protocol, blockTime(sort: Desc)])
}